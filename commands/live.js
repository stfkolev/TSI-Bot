const TeemoJS = require('teemojs');
const request = require('request');
const canvas = require('canvas');

const {
    riotApi
} = require('../config/config.json');
const api = TeemoJS(riotApi);

const {
    RichEmbed
} = require('discord.js');

module.exports = {
    name: 'live',
    description: 'Live match information',

    async execute(message, args) {
        let region = '';

        switch (args[0]) {
            case 'eune':
                region = 'eun1';
                break;

            case 'na':
                region = 'na1';
                break;

            case 'euw':
                region = 'euw1';
                break;

            case 'tr':
                region = 'tr1';
                break;

            case 'kr':
                region = 'kr';
                break;

            case 'jp':
                region = 'jp1';
                break;

            case 'oce':
                region = 'oc1';
                break;

            case 'ru':
                region = 'ru';
                break;

            case 'br':
                region = 'br1';
                break;

            case 'lan':
                region = 'la1';
                break;

            case 'las':
                region = 'la2';
                break;

            default:
                message.channel.send(`The ${args[0]} region is not supported for now!`);
                break;
        }

        let summonerName = args.slice(1).join(' ');

        let summonerId = api.get(region, 'summoner.getBySummonerName', summonerName);

        let url = 'http://ddragon.leagueoflegends.com/cdn/9.3.1/data/en_US/champion.json';
        let championsJson = '';

        request({
            url: url,
            json: true,
        }, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                championsJson = body;
            }
        });

        summonerId.then(data => {
            let liveGame = api.get(region, 'spectator.getCurrentGameInfoBySummoner', data.id);

            liveGame.then(async live => {

                if (!live) {
                    message.channel.send(`\`The summoner is not in a live game right now!\``);
                    return;
                }
                let mapName = '';
                //console.log(data);

                switch (live.mapId) {
                    case 10:
                        mapName = 'Twisted Treeline';
                        break;

                    case 11:
                        mapName = `Summoner's Rift`;
                        break;
                }

                let mapInfo = new RichEmbed()

                    .setColor('#00ff99')
                    .setTitle(`Currently playing on ${mapName}`)

                    .setImage(`http://ddragon.leagueoflegends.com/cdn/9.3.1/img/map/map${live.mapId}.png`)

                    .setTimestamp()
                    .setFooter('Generated by The Shadow Isles Bot');

                message.channel.send(mapInfo);
                var bannedChamps = [];

                for (let banned in live.bannedChampions) {
                    for (let champion in championsJson.data) {

                        if (championsJson.data[champion].key == live.bannedChampions[banned].championId) {
                            bannedChamps.push({
                                name: `${championsJson.data[champion].name}`,
                                image: `http://ddragon.leagueoflegends.com/cdn/9.13.1/img/champion/${championsJson.data[champion].image.full}`,
                                team: live.bannedChampions[banned].teamId,
                            });

                        }
                    }
                }

                let bannedChampions = [];
                Object.keys(bannedChamps).sort().forEach(function (champion) {
                    bannedChampions[champion] = bannedChamps[champion];
                });

                message.channel.send(new RichEmbed().setTitle('***Banned Champions***'));

                for (let champion in bannedChampions) {
                    message.channel.send(new RichEmbed()
                        .setTitle(bannedChamps[champion].name)
                        .setImage(bannedChamps[champion].image)
                        .setColor(bannedChamps[champion].team == 100 ? '#4259B3' : '#c7166f')
                    );
                }

                message.channel.send(new RichEmbed().setTitle('***Players***').setColor('#f0d01d'));

                for (let participant in live.participants) {
                    var queue = '';
                    let queueId = null;

                    summonerId.then(info => {
                        api.get(region, 'league.getLeagueEntriesForSummoner', info.id)
                            .then(accountData => {
                                console.log(accountData);
                                for (let index = 0; index < accountData.length; index++) {

                                    if (accountData[index].queueType == queue) {
                                        let description = '';
                                        let summonerRank = '';

                                        /*! Convert Ranking for image */
                                        let rank = rankNumber => {
                                            switch (rankNumber) {
                                                case 'I':
                                                    return 1;
                                                case 'II':
                                                    return 2;
                                                case 'III':
                                                    return 3;
                                                case 'IV':
                                                    return 4;
                                            }
                                        };

                                        let division = divisionId => {
                                            switch (divisionId) {

                                                case 'IRON':
                                                    return 0;

                                                case 'BRONZE':
                                                    return 0.4;

                                                case 'SILVER':
                                                    return 0.8;

                                                case 'GOLD':
                                                    return 1.2;

                                                case 'PLATINUM':
                                                    return 1.6;

                                                case 'DIAMOND':
                                                    return 2;

                                                case 'MASTER':
                                                case 'GRANDMASTER':
                                                case 'CHALLENGER':
                                                    return 2.4;

                                            }
                                        }

                                        if (!accountData[index].tier) {
                                            accountData[index].tier = 'Unranked';
                                            accountData[index].rank = '';
                                            accountData[index].leaguePoints = '';

                                            description = `Currently ${accountData[index].tier}`
                                            summonerRank = `https://opgg-static.akamaized.net/images/medals/${accountData[index].tier.toLowerCase()}.png`;
                                        } else {
                                            description = `Currently ${accountData[index].tier} ${accountData[index].rank} on ${accountData[index].leaguePoints} points`;
                                            summonerRank = `https://opgg-static.akamaized.net/images/medals/${accountData[index].tier.toLowerCase()}_${rank(accountData[index].rank)}.png`;
                                        }

                                        /*! MMR Variables */

                                        let summonerScore = null;
                                        let wonGames = 0;

                                        /* END MMR Variables */

                                        let matchHistory = api.get(region, 'match.getMatchlist', info.accountId);

                                        matchHistory.then(async matches => {

                                            for (let match in matches.matches) {
                                                if (match < 10) {
                                                    api.get(region, 'match.getMatch', matches.matches[match].gameId).then(game => {
                                                        let teamId = null;
                                                        let participantId = null;

                                                        if (game.queueId == queueId) {

                                                            for (let participant in game.participantIdentities)
                                                                if (game.participantIdentities[participant].player.accountId == info.accountId)
                                                                    participantId = game.participantIdentities[participant].participantId;

                                                            for (let participant in game.participants)
                                                                if (game.participants[participant].participantId == participantId)
                                                                    teamId = game.participants[participant].teamId;

                                                            for (let team in game.teams)
                                                                if (game.teams[team].teamId == teamId && game.teams[team].win == 'Win')
                                                                    wonGames += 1;
                                                        }
                                                    });
                                                }
                                            }

                                            let champion = '';

                                            for (let champ in championsJson.data) {
                                                if (championsJson.data[champ].key == live.participants[participant].championId)
                                                    champion = championsJson.data[champ].name;
                                            }

                                            /*! Calcualte Summoner Score - Similar to MMR */
                                            summonerScore = await parseInt(
                                                (division(accountData[index].tier) * 1000) +
                                                (rank(accountData[index].rank) * 100) +
                                                (wonGames * 10) +
                                                (accountData[index].wins / (
                                                    accountData[index].wins +
                                                    accountData[index].losses
                                                ) * 100) +
                                                (accountData[index].leaguePoints / 1.2)
                                            );
                                            /*! Create panel for summoner info */
                                            let summonerInfo = await new RichEmbed()

                                                .setColor('#0099ff')
                                                .setTitle(`Currently playing ${champion}`)

                                                .setAuthor(info.name, 'http://ddragon.leagueoflegends.com/cdn/9.13.1/img/profileicon/' + info.profileIconId + '.png')
                                                .setDescription(description)
                                                .setThumbnail('http://ddragon.leagueoflegends.com/cdn/9.13.1/img/profileicon/' + info.profileIconId + '.png')

                                                .addBlankField()

                                                .addField('Summoner Name ', info.name, true)
                                                .addField('Division ', accountData[index].tier + ' ' + accountData[index].rank + ' ~ ' + accountData[index].leaguePoints + ' LP', true)
                                                .setImage(summonerRank)

                                                .addBlankField()

                                                .addField('Veteran ', accountData[index].veteran ? 'Yes' : 'No', true)
                                                .addField('Inactive ', accountData[index].inactive ? 'Yes' : 'No', true)
                                                .addField('Hot Streak ', accountData[index].hotStreak ? 'Yes' : 'No', true)
                                                .addField('Fresh Blood ', accountData[index].freshBlood ? 'Yes' : 'No', true)

                                                .addBlankField()

                                                .addField('Wins ', accountData[index].wins, true)
                                                .addField('Losses ', accountData[index].losses, true)
                                                .addField('Winrate ', (accountData[index].wins / (accountData[index].wins + accountData[index].losses) * 100).toFixed(2) + '%', true)
                                                .addField('Estimated MMR ', summonerScore, true)

                                                .setTimestamp()
                                                .setFooter('Generated by The Shadow Isles Bot');

                                            await message.channel.send(summonerInfo);
                                        });
                                    }
                                }
                            });
                    });

                }
            });
        });
    }
}